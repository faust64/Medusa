(self.webpackChunkslim=self.webpackChunkslim||[]).push([[143],{7971:(e,o,t)=>{"use strict";var n=t(538),s=t(1468),a=t(1083),i=t(2721),l=t(629),d=t(4054);n.default.config.devtools=!0,n.default.config.performance=!0,(0,s.zb)(),(0,s.VZ)();new n.default({name:"app",router:a.Z,store:i.Z,data:()=>({globalLoading:!1,pageComponent:!1}),computed:{...(0,l.rn)({showsLoading:e=>e.shows.loading})},mounted(){const{getShows:e,setLoadingDisplay:o,setLoadingFinished:t}=this;if(d.yG&&console.log("App Mounted!"),!window.location.pathname.includes("/login")){const{$store:e}=this;Promise.all([e.dispatch("login",{username:window.username}),e.dispatch("getConfig"),e.dispatch("getStats")]).then((([e,o])=>{d.yG&&console.log("App Loaded!");const t=new CustomEvent("medusa-config-loaded",{detail:{general:o.general,layout:o.layout}});window.dispatchEvent(t)})).catch((e=>{console.debug(e),alert("Unable to connect to Medusa!")}))}e().then((()=>{console.log("Finished loading all shows."),setTimeout((()=>{t(!0),o(!1)}),2e3)}))},methods:{...(0,l.nv)({getShows:"getShows"}),...(0,l.OI)(["setLoadingDisplay","setLoadingFinished"])}}).$mount("#vue-wrap")}},e=>{"use strict";e.O(0,[886,125],(()=>{return o=7971,e(e.s=o);var o}));e.O()}]);
//# sourceMappingURL=app.js.map